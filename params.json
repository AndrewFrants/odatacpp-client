{"name":"ODataCpp","tagline":"The open-source C++ libraries for OData","body":"# Welcome to ODataCpp\r\nODataCpp is an open-source C++ library that implements the Open Data Protocol (OData). It supports the [OData protocol version 4.0](http://docs.oasis-open.org/odata/odata/v4.0/os/part1-protocol/odata-v4.0-os-part1-protocol.html). It currently serves only client and client side proxy generation (code gen) aspects of OData. The server library is under development and will be included soon.\r\n\r\n# Getting started\r\n## Getting the source\r\n\r\n    git clone https://github.com/odata/odatacpp\r\n\r\n## Building on Windows with Visual Studio 2012\r\n\r\n1.Please ensure that you have Visual Studio 2012 installed.\r\n\r\n2.ODataCpp depends on Casablanca (http://casablanca.codeplex.com) which is distributed as a NuGet package.\r\n  Please restore this NuGet package before you open any solution:\r\n\r\n    cd odatacpp\\msvc\r\n    .nuget\\nuget.exe restore odatacpp_tests.sln\r\n\r\n3.Open 'odatacpp_tests.sln' under 'odatacpp\\msvc' with VS2012 and click 'Build Solution' in the 'BUILD' menu.\r\n\r\n4.Built libraries are placed under 'odatacpp\\output\\\\\\<Configuration\\>' where '\\<Configuration\\>' could be either 'Debug' or 'Release' according to your build configuration in VS2012.\r\n\r\n## Building on Windows with MSBuild\r\n\r\n1.Setup build environment for VS2012:\r\n\r\n    cd odatacpp\r\n    powershell\r\n    .\\setup_ps_env_VS2012.ps1\r\n\r\n   If you receive an error message like 'running scripts is disabled on this system', please run PowerShell as administrator, type the following command, and then rerun the setup script above.\r\n\r\n    Set-ExecutionPolicy RemoteSigned\r\n\r\n2.Here are some examples to invoke MSBuild:\r\n\r\n   1) Build Debug version of ODataCpp libraries in parallel.\r\n\r\n    msbuild /m\r\n\r\n   2) Build Release version of ODataCpp libraries.\r\n\r\n    msbuild /p:Configuration=Release\r\n\r\n   3) Rebuild Debug version of ODataCpp.\r\n\r\n    msbuild /t:Rebuild /p:Configuration=Debug\r\n\r\n   4) Clean build outputs.\r\n\r\n    msbuild /t:Clean\r\n\r\n3.Built libraries are placed under the same folder of VS2012. Actually they are no different than the ones built by VS2012.\r\n\r\n## Running tests on Windows\r\n\r\n1.After you have successfully built the libraries, you can run our functional and end-to-end tests to check the basic functionality.\r\n\r\n  1) Test the Debug version of ODataCpp Libraries:\r\n\r\n    cd odatacpp\\output\\Debug\r\n    TestRunner.exe odata_functional_test.vs11d.dll odata_e2e_test.vs11d.dll\r\n\r\n  2) Test the Release version of ODataCpp Libraries:\r\n\r\n    cd odatacpp\\output\\Release\r\n    TestRunner.exe odata_functional_test.vs11.dll odata_e2e_test.vs11.dll\r\n\r\n  Don't worry about the failed tests as they are known issues and we will get them fixed in the future releases.\r\n\r\n## Building on OS X\r\n\r\n1.Please ensure that you have OS X later than 10.9, Xcode later than 5.0 and Xcode Command Line Tools installed.\r\n\r\n2.Install the Homebrew package manager (http://brew.sh). Skip this step if you want to use your own package manager.\r\n\r\n3.Install the required packages to build ODataCpp via Homebrew or your own package manager.\r\n\r\n    brew install cmake git boost libxml++ pkg-config\r\n\r\n4.Clone (do not change the location below) and build the dependency library Casablanca (http://casablanca.codeplex.com).\r\n\r\n    cd odatacpp\r\n    mkdir lib\r\n    cd lib\r\n    git clone https://git01.codeplex.com/casablanca\r\n    cd casablanca\r\n    mkdir build.release\r\n    cd build.release\r\n    cmake ../Release -DCMAKE_BUILD_TYPE=Release\r\n    make -j 4\r\n\r\n5.Return to the root folder of ODataCpp and generate 'Makefile' using CMake.\r\n\r\n    cd ../../..\r\n    cmake -DCMAKE_BUILD_TYPE=Debug # replace 'Debug' with 'Release' if needed\r\n    make -j 4\r\n\r\n  Ignore the possible warning CMP0042 issued by CMake.\r\n\r\n6.Please find your built libraries under 'output'.\r\n\r\n## Running tests on OS X\r\n\r\nAfter successfully building the libraries, you can run the functional and end-to-end tests via the terminal.\r\n\r\n    cd odatacpp/output\r\n    ./test_runner *tests*\r\n\r\nPlease ignore the failed tests as they are already known to us and will be fixed in the future releases.\r\n\r\n# Documentation\r\nPlease refer to our [wiki](https://github.com/OData/odatacpp/wiki) for documentation.\r\n\r\n# Community\r\n## Issue tracker\r\nTo report bugs and require features, please use our [issue tracker](https://github.com/OData/odatacpp/issues?state=open).\r\n\r\n## Mailing list\r\nTo receive announcements or discussions, please subscribe to our mailing list:\r\n\r\nodatacpp-discussion+subscribe@googlegroups.com.\r\n\r\nTo ask questions or provide feedback, simply send mail to:\r\n\r\nodatacpp-discussion@googlegroups.com.\r\n\r\n## Team blog\r\nPlease visit http://blogs.msdn.com/b/odatateam/.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}